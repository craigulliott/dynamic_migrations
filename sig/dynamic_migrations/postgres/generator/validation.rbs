# TypeProf 0.21.7

# Classes
module DynamicMigrations
  module Postgres
    class Generator
      module Validation
        self.@templates: Hash[Symbol, singleton(ValidationTemplateBase)]

        def self.template: (Symbol template_name) -> singleton(ValidationTemplateBase)
        def self.has_template?: (Symbol template_name) -> bool
        def self.add_template: (Symbol template_name, singleton(ValidationTemplateBase) template_class) -> void

        def add_validation: (Postgres::Server::Database::Schema::Table::Validation validation, ?String? code_comment) -> Fragment
        def remove_validation: (Postgres::Server::Database::Schema::Table::Validation validation, ?String? code_comment) -> Fragment
        def recreate_validation: (Postgres::Server::Database::Schema::Table::Validation original_validation, Postgres::Server::Database::Schema::Table::Validation updated_validation) -> Array[Fragment]
        def set_validation_comment: (Postgres::Server::Database::Schema::Table::Validation validation, ?String? code_comment) -> Fragment
        def remove_validation_comment: (Postgres::Server::Database::Schema::Table::Validation validation, ?String? code_comment) -> Fragment

        # these come from the generator object (which this module is included into)
        def add_fragment: (migration_method: Symbol, object: untyped, migration: String, ?schema: Server::Database::Schema?, ?table: Server::Database::Schema::Table?, ?code_comment: String?, ?dependent_table: Server::Database::Schema::Table?) -> untyped

        def indent: (String migration, ?Integer levels) -> String

        class UnexpectedTemplateError < StandardError
        end

        class TemplateAlreadyExistsError < StandardError
        end
      end
    end
  end
end