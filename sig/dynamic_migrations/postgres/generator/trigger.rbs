# Classes
module DynamicMigrations
  module Postgres
    class Generator
      module Trigger
        self.@templates: Hash[Symbol, singleton(TriggerTemplateBase)]

        def self.template: (Symbol template_name) -> singleton(TriggerTemplateBase)
        def self.has_template?: (Symbol template_name) -> bool
        def self.add_template: (Symbol template_name, singleton(TriggerTemplateBase) template_class) -> void

        def add_trigger: (Server::Database::Schema::Table::Trigger trigger, ?String? code_comment) -> Fragment?
        def remove_trigger: (Server::Database::Schema::Table::Trigger trigger, ?String? code_comment) -> Fragment
        def recreate_trigger: (Server::Database::Schema::Table::Trigger original_trigger, Server::Database::Schema::Table::Trigger updated_trigger) -> Array[Fragment]
        def set_trigger_comment: (Postgres::Server::Database::Schema::Table::Trigger trigger, ?String? code_comment) -> Fragment
        def remove_trigger_comment: (Postgres::Server::Database::Schema::Table::Trigger trigger, ?String? code_comment) -> Fragment

        # these come from the generator object (which this module is included into)
        def add_fragment: (migration_method: Symbol, object: untyped, migration: String, ?schema: Server::Database::Schema?, ?table: Server::Database::Schema::Table?, ?code_comment: String?, ?dependent_table: Server::Database::Schema::Table?, ?dependent_function: Server::Database::Schema::Function?, ?dependent_enum: Server::Database::Schema::Enum?) -> Fragment

        def indent: (String migration, ?Integer levels) -> String

        class UnexpectedTemplateError < StandardError
        end

        class TemplateAlreadyExistsError < StandardError
        end
      end
    end
  end
end
