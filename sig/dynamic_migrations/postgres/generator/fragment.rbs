# TypeProf 0.21.7

# Classes
module DynamicMigrations
  module Postgres
    class Generator
      class Fragment
        @content: String
        @code_comment: String?

        attr_reader migration_method: Symbol
        attr_reader object_name: Symbol
        # schema_name can be nill for database only migrations, like `create extension`
        attr_reader schema_name: Symbol?
        # table_name can be nil because some migrations, such
        # as ones which pertain to functions and creating/dropping
        # schemas don't require tables
        attr_reader table_name: Symbol?
        # dependecy on a table is optional
        attr_reader dependency_schema_name: Symbol?
        attr_reader dependency_table_name: Symbol?
        attr_reader dependency_function_name: Symbol?
        attr_reader dependency_enum_name: Symbol?

        def initialize: (Symbol? schema_name, Symbol? table_name, Symbol migration_method, Symbol object_name, String? code_comment, String content) -> void
        def to_s: -> String
        def has_code_comment?: -> bool

        def table_dependency: -> ({schema_name: Symbol, table_name: Symbol} | nil)
        def function_dependency: -> ({schema_name: Symbol, function_name: Symbol} | nil)
        def enum_dependency: -> ({schema_name: Symbol, enum_name: Symbol} | nil)

        def is_dependent_on_table?: (Symbol schema_name, Symbol table_name) -> bool

        def set_dependent_table: (Symbol schema_name, Symbol table_name) -> void
        def set_dependent_function: (Symbol schema_name, Symbol function_name) -> void
        def set_dependent_enum: (Symbol schema_name, Symbol enum_name) -> void

        def dependency_type: -> (nil | :function | :table | :enum)
      end
    end
  end
end
