# TypeProf 0.21.7

# Classes
module DynamicMigrations
  module Postgres
    class Generator
      include TSort

      @fragments: Array[Fragment]
      @logger: Logging::Logger

      include Schema
      include Table
      include Column
      include ForeignKeyConstraint
      include Index
      include PrimaryKey
      include UniqueConstraint
      include Validation
      include Function
      include Trigger

      def initialize: -> void
      def migrations: -> Array[{
        schema_name: Symbol,
        name: Symbol,
        content: String
      }]

      private
      def resolve_circular_dependencies: (TableMigration table_migration, Array[TableMigration] all_table_migrations, Hash[Symbol, untyped] database_migrations, Array[TableMigration] completed_table_migrations, ?Array[String] stack) -> void
      def supported_migration_method?: (Symbol migration_method) -> bool
      def add_fragment: (migration_method: Symbol, object: untyped, migration: String, ?schema: Server::Database::Schema?, ?table: Server::Database::Schema::Table?, ?code_comment: String?, ?dependent_table: Server::Database::Schema::Table?, ?dependent_function: Server::Database::Schema::Function?, ?dependent_enum: Server::Database::Schema::Enum?) -> Fragment
      def indent: (String migration, ?Integer levels) -> String
      def tsort_each_node: -> Enumerator[untyped, untyped]
      def tsort_each_child: (untyped node) -> untyped
      def trim_lines: (String migration) -> String
      def log: -> Logging::Logger

      class ExpectedSymbolError < StandardError
      end

      class DeferrableOptionsError < StandardError
      end

      class MissingDescriptionError < StandardError
      end

      class NoDifferenceError < StandardError
      end

      class TableMigrationNotFound < StandardError
      end

      class UnprocessableFragmentError < StandardError
      end
    end
  end
end