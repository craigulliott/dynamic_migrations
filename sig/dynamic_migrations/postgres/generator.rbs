# TypeProf 0.21.7

# Classes
module DynamicMigrations
  module Postgres
    class Generator
      include TSort

      @fragments: Array[Fragment]

      include Schema
      include Table
      include Column
      include ForeignKeyConstraint
      include Index
      include PrimaryKey
      include UniqueConstraint
      include Validation
      include Function
      include Trigger

      def initialize: -> void
      def migrations: -> Array[{
        schema_name: Symbol,
        name: Symbol,
        content: String
      }]

      private
      def circular_dependency?: (Symbol schema_name, Symbol table_name, {schema_name: Symbol, table_name: Symbol} dependency, Array[TableMigration] all_table_migrations) -> bool
      def supported_migration_method?: (Symbol migration_method) -> bool
      def add_fragment: (schema: Server::Database::Schema, migration_method: Symbol, object: untyped, migration: String, ?table: nil | Server::Database::Schema::Table, ?code_comment: nil | String, ?dependent_table: nil | Server::Database::Schema::Table) -> Fragment
      def indent: (String migration) -> String
      def strip_empty_lines: (String migration) -> String
      def tsort_each_node: -> Enumerator[untyped, untyped]
      def tsort_each_child: (untyped node) -> untyped

      class ExpectedSymbolError < StandardError
      end

      class DeferrableOptionsError < StandardError
      end

      class MissingDescriptionError < StandardError
      end

      class NoDifferenceError < StandardError
      end

      class TableMigrationNotFound < StandardError
      end
    end
  end
end