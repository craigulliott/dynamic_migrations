# TypeProf 0.21.7

# Classes
module DynamicMigrations
  module Postgres
    class Generator
      @migrations: Hash[Symbol, Hash[Symbol | nil, Hash[Symbol, Array[Fragment]]]]
      @supported_migration_method_names: Array[Symbol]

      STRUCTURE: Array[{
        header_comment: String,
        methods: Array[Symbol],
        break_after: bool?,
        break_before: bool?
      }]

      include Schema
      include Table
      include Column
      include ForeignKeyConstraint
      include Index
      include PrimaryKey
      include UniqueConstraint
      include Validation
      include Function
      include Trigger

      def initialize: -> void
      def migrations: -> Hash[Symbol, Array[String]]

      private
      def supported_migration_method_names: -> Array[Symbol]
      def supported_migration_method?: (Symbol migration_method) -> bool
      def add_migration: (Symbol schema_name, Symbol | nil table_name, Symbol migration_method, Symbol | nil object_name, nil | String code_comment, String migration) -> Fragment
      def indent: (String migration) -> String
      def strip_empty_lines: (String migration) -> String

      class ExpectedSymbolError < StandardError
      end

      class DeferrableOptionsError < StandardError
      end

      class UnexpectedMigrationMethodNameError < StandardError
      end

      class MissingDescriptionError < StandardError
      end

      class NoDifferenceError < StandardError
      end
    end
  end
end