# TypeProf 0.21.7

# Classes
module DynamicMigrations
  module Postgres
    class Server
      class Database
        class Schema
          class Table
            class Trigger < Source
              attr_reader table: Table
              attr_reader name: Symbol
              attr_reader event_manipulation: Symbol
              attr_reader action_timing: Symbol
              attr_reader action_order: Integer
              attr_reader action_condition: String?
              attr_reader action_statement: String
              attr_reader action_orientation: Symbol
              attr_reader function: Function
              attr_reader action_reference_old_table: Symbol?
              attr_reader action_reference_new_table: Symbol?
              attr_reader description: String?

              def initialize: (database_or_configuration source, Table table, Symbol name, action_timing: Symbol, event_manipulation: Symbol, action_order: Integer, action_statement: String, action_orientation: Symbol, function: Function, ?action_condition: String?, ?action_reference_old_table: Symbol?, ?action_reference_new_table: Symbol?, ?description: String?) -> void
              def has_description?: -> false
              def differences_descriptions: (Trigger other_trigger) -> Array[String]

              class ExpectedTableError < StandardError
              end

              class UnexpectedEventManipulationError < StandardError
              end

              class UnexpectedActionOrderError < StandardError
              end

              class UnexpectedActionStatementError < StandardError
              end

              class UnexpectedActionOrientationError < StandardError
              end

              class UnexpectedActionTimingError < StandardError
              end

              class ExpectedOldRecordsTableError < StandardError
              end

              class ExpectedNewRecordsTableError < StandardError
              end

              class ExpectedFunctionError < StandardError
              end
            end
          end
        end
      end
    end
  end
end
