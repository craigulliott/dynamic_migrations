module DynamicMigrations
  module Postgres
    class Server
      class Database
        class Schema
          class Table
            module ForeignKeyConstraints
              @foreign_key_constraints: Hash[Symbol, ForeignKeyConstraint]

              def foreign_key_constraint: (Symbol name) -> ForeignKeyConstraint
              def has_foreign_key_constraint?: (Symbol name) -> bool
              def foreign_key_constraints: -> Array[ForeignKeyConstraint]
              def foreign_key_constraints_hash: -> Hash[Symbol, ForeignKeyConstraint]
              def add_foreign_key_constraint: (Symbol name, Array[Symbol] column_names, Symbol foreign_schema_name, Symbol foreign_table_name, Array[Symbol] foreign_column_names, **untyped) -> untyped
              def add_remote_foreign_key_constraint: (ForeignKeyConstraint foreign_key_constraint) -> untyped

              # these come from the table object (which this module is included into)
              def source: -> database_or_configuration
              def column: (Symbol column_name) -> Column
              def schema: -> Schema

              class ForeignKeyConstraintDoesNotExistError < StandardError
              end

              class ForeignKeyConstraintAlreadyExistsError < StandardError
              end
            end
          end
        end
      end
    end
  end
end
