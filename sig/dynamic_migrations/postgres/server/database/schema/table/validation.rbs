module DynamicMigrations
  module Postgres
    class Server
      class Database
        class Schema
          class Table
            class Validation < Source
              @columns: Hash[Symbol, Column]
              @normalized_check_clause_and_column_names: {check_clause: String, column_names: Array[Symbol]}?

              attr_reader table: Table
              attr_reader name: Symbol
              attr_reader check_clause: String
              attr_reader deferrable: bool
              attr_reader initially_deferred: bool
              attr_reader description: String?
              attr_reader template: Symbol?

              def initialize: (database_or_configuration source, Table table, Array[Column]? columns, Symbol name, String check_clause, ?deferrable: bool, ?initially_deferred: bool, ?description: String?, ?template: Symbol?) -> void
              def columns: -> Array[Column]
              def column_names: -> Array[Symbol]
              def has_description?: -> bool
              def differences_descriptions: (Validation other_validation) -> Array[String]
              def normalized_check_clause: -> String

              private

              def normalized_check_clause_and_column_names: -> {check_clause: String, column_names: Array[Symbol]}
              def fetch_normalized_check_clause_and_column_names: -> {check_clause: String, column_names: Array[Symbol]}

              def add_column: (Column column) -> void

              class ExpectedTableError < StandardError
              end

              class ExpectedArrayOfColumnsError < StandardError
              end

              class ExpectedTableColumnsError < StandardError
              end

              class DuplicateColumnError < StandardError
              end

              class ModuleIncludedIntoUnexpectedTargetError < StandardError
              end

              class UnexpectedTemplateError < StandardError
              end

              class UnnormalizableCheckClauseError < StandardError
              end
            end
          end
        end
      end
    end
  end
end
