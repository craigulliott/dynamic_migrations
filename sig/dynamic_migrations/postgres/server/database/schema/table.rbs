module DynamicMigrations
  module Postgres
    class Server
      class Database
        class Schema
          class Table < Source
            @primary_key: PrimaryKey | nil

            include Columns
            include Validations
            include Indexes
            include ForeignKeyConstraints
            include UniqueConstraints
            include Triggers

            attr_reader schema: Schema
            attr_reader name: Symbol
            attr_reader description: String?
            attr_reader remote_foreign_key_constraints: Array[ForeignKeyConstraint]
            def initialize: (database_or_configuration source, Schema schema, Symbol name, ?description: String?) -> void
            def has_description?: -> bool
            def add_primary_key: (Symbol name, Array[Symbol] column_names, **untyped) -> untyped
            def has_primary_key?: -> bool
            def primary_key: -> PrimaryKey
            def create_temp_table: (PG::Connection connection, String table_name) -> Hash[String, Enum]
            class ExpectedSchemaError < StandardError
            end

            class PrimaryKeyDoesNotExistError < StandardError
            end

            class PrimaryKeyAlreadyExistsError < StandardError
            end
          end
        end
      end
    end
  end
end
