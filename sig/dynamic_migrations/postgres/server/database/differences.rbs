module DynamicMigrations
  module Postgres
    class Server
      class Database
        class Differences
          @database: Database
          @logger: Logging::Logger
          self.@logger: Logging::Logger

          def initialize: (Database database) -> void
          def to_h: -> untyped
          def to_migrations: -> Hash[Symbol, Array[{name: Symbol, content: String}]]

          def self.compare_schemas: (Hash[Symbol, Schema] schemas, Hash[Symbol, Schema] comparison_schemas) -> Hash[Symbol, untyped]
          def self.compare_extensions: (Array[Symbol] extensions, Array[Symbol] comparison_extensions) -> Hash[Symbol, untyped]
          def self.compare_schema: (Schema schema, Schema comparison_schema) -> {
            exists: true,
            tables: Hash[Symbol, untyped]
          }
          def self.compare_tables: (Hash[Symbol, Schema::Table] tables, Hash[Symbol, Schema::Table] comparison_tables) -> Hash[Symbol, untyped]
          def self.compare_functions: (Hash[Symbol, Schema::Function] functions, Hash[Symbol, Schema::Function] comparison_functions) -> Hash[Symbol, untyped]
          def self.compare_enums: (Hash[Symbol, Schema::Enum] enums, Hash[Symbol, Schema::Enum] comparison_enums) -> Hash[Symbol, untyped]
          def self.compare_table: (Schema::Table table, Schema::Table comparison_table) -> Hash[Symbol, untyped]
          def self.compare_columns: (Hash[Symbol, Schema::Table::Column] columns, Hash[Symbol, Schema::Table::Column] comparison_columns) -> Hash[Symbol, untyped]
          def self.compare_triggers: (Hash[Symbol, Schema::Table::Trigger] triggers, Hash[Symbol, Schema::Table::Trigger] comparison_triggers) -> Hash[Symbol, untyped]
          def self.compare_unique_constraints: (Hash[Symbol, Schema::Table::UniqueConstraint] unique_constraints, Hash[Symbol, Schema::Table::UniqueConstraint] comparison_unique_constraints) -> Hash[Symbol, untyped]
          def self.compare_indexes: (Hash[Symbol, Schema::Table::Index] indexes, Hash[Symbol, Schema::Table::Index] comparison_indexes) -> Hash[Symbol, untyped]
          def self.compare_validations: (Hash[Symbol, Schema::Table::Validation] validations, Hash[Symbol, Schema::Table::Validation] comparison_validations) -> Hash[Symbol, untyped]
          def self.compare_foreign_key_constraints: (Hash[Symbol, Schema::Table::ForeignKeyConstraint] foreign_key_constraints, Hash[Symbol, Schema::Table::ForeignKeyConstraint] comparison_foreign_key_constraints) -> Hash[Symbol, untyped]
          def self.compare_record: (untyped | nil base, Object | nil comparison, Array[Symbol] method_list) -> Hash[Symbol, untyped]
          def self.log: -> Logging::Logger

          private
          def log: -> Logging::Logger

          class ExpectedDatabaseError < StandardError
          end

          class TableRequiredError < StandardError
          end

          class SchemaRequiredError < StandardError
          end

          class FunctionRequiredError < StandardError
          end
        end
      end
    end
  end
end
